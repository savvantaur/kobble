server {
   listen 80;
   
   # Set the max size for file uploads to 500Mb for spark's audio uploads
   client_max_body_size 500M;

   # sets the domain[s] that this vhost server requests for
   server_name spoke.spanner.org spoke.sparknow.net mla.sparknow.net mlal.sparknow.net

   # doc root
   root /var/www/spoke/current/public;

   # vhost specific access log
   access_log  /var/www/spoke/logs/nginx.access.log  main;

   # this rewrites all the requests to the maintenance.html
   # page if it exists in the doc root. This is for capistrano's
   # disable web task
   if (-f $document_root/system/maintenance.html) {
     rewrite  ^(.*)$  /system/maintenance.html last;
     break;
   }

   location / {
     # needed to forward user's IP address to rails
     proxy_set_header  X-Real-IP  $remote_addr;

     # needed for HTTPS
     proxy_set_header  X-Forwarded-For $proxy_add_x_forwarded_for;
     proxy_set_header Host $http_host;
     proxy_redirect false;
     proxy_max_temp_file_size 0;
     
     # post requests we forward to rails
     if ($request_method == POST) {
       proxy_pass http://spoke_creation;
       break;
     }

     # If the file exists as a static file serve it directly without
     # running all the other rewite tests on it
     if (-f $request_filename) { 
       break; 
     }

     # check for index.html for directory index
     # if its there on the filesystem then rewite 
     # the url to add /index.html to the end of it
     # and then break to send it to the next config rules.
     if (-f $request_filename/index.html) {
       rewrite (.*) $1/index.html break;
     }

     # this is the meat of the rails page caching config
     # it adds .html to the end of the url and then checks
     # the filesystem for that file. If it exists, then we
     # rewite the url to have explicit .html on the end 
     # and then send it on its way to the next config rule.
     # if there is no file on the fs then it sets all the 
     # necessary headers and proxies to our upstream mongrels
     if (-f $request_filename.html) {
       rewrite (.*) $1.html break;
     }
     
     # anything else for which no real file is found, we 
     # pass on to the cluster
     if (!-f $request_filename) {
       proxy_pass http://spoke_mongrel;
       break;
     }
   }

   error_page   500 502 503 504  /500.html;
   location = /500.html {
     root /var/www/spoke/current/public;
   }
 }
